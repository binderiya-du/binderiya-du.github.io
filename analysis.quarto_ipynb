{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Exploratory Data Analysis on Data Analytics Job Trends\"\n",
        "format: html\n",
        "execute:\n",
        "  echo: true   # To show the code\n",
        "  warning: true\n",
        "  error: true\n",
        "  results: \"markup\"  # To display the results\n",
        "jupyter: python3\n",
        "---"
      ],
      "id": "d8c34ab4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import plotly.express as px\n",
        "df = pd.read_csv(\"lightcast_job_postings.csv\")\n",
        "print(\"Available columns in dataset:\", df.columns.tolist())\n",
        "\n",
        "columns_to_drop = [\n",
        "    \"ID\", \"URL\", \"ACTIVE_URLS\", \"DUPLICATES\", \"LAST_UPDATED_TIMESTAMP\",\n",
        "    \"NAICS2\", \"NAICS3\", \"NAICS4\", \"NAICS5\", \"NAICS6\",\n",
        "    \"SOC_2\", \"SOC_3\", \"SOC_5\"\n",
        "]\n",
        "\n",
        "df.drop(columns=columns_to_drop, inplace=True)\n",
        "print(\"Dropped unnecessary columns.\")\n",
        "print(df.columns)\n",
        "\n",
        "# handle missing value\n",
        "print(\"Missing values before cleaning:\")\n",
        "print(df.isnull().sum())\n",
        "\n",
        "\n",
        "\n",
        "import missingno as msno\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Check column names\n",
        "df.columns = df.columns.str.upper().str.strip()  # Normalize column names\n",
        "print(df.columns)  # Debugging step\n",
        "\n",
        "# Visualize missing data\n",
        "msno.heatmap(df)\n",
        "plt.title(\"Missing Values Heatmap\")\n",
        "plt.show()\n",
        "\n",
        "# Drop columns with >50% missing values\n",
        "df.dropna(thresh=len(df) * 0.5, axis=1, inplace=True)\n",
        "\n",
        "# Check if \"SALARY\" exists before filling missing values\n",
        "if \"SALARY\" in df.columns:\n",
        "    df[\"SALARY\"].fillna(df[\"SALARY\"].median(), inplace=True)\n",
        "else:\n",
        "    print(\"⚠️ Warning: 'SALARY' column not found in dataframe!\")\n",
        "\n",
        "# Check if \"INDUSTRY\" exists before filling missing values\n",
        "if \"INDUSTRY\" in df.columns:\n",
        "    df[\"INDUSTRY\"].fillna(\"Unknown\", inplace=True)\n",
        "else:\n",
        "    print(\"⚠️ Warning: 'INDUSTRY' column not found in dataframe!\")\n",
        "\n",
        "print(\"✅ Missing value handling complete.\")\n",
        "\n",
        "# delete duplicates\n",
        "df = df.drop_duplicates(subset=[\"TITLE\", \"COMPANY\", \"LOCATION\", \"POSTED\"])\n",
        "print(\"Duplicates removed.\")"
      ],
      "id": "cdcb962f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "if \"SALARY\" in df.columns:\n",
        "    df[\"SALARY\"].fillna(df[\"SALARY\"].median(), inplace=True)\n",
        "else:\n",
        "    print(\"⚠️ Warning: 'SALARY' column not found in dataframe!\")"
      ],
      "id": "eb8543fe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# identifying data analyst jobs by keyword searching\n",
        "keywords = ['Data Analyst', 'Business Analyst', 'Data Engineering', 'Deep Learning',\n",
        "            'Data Science', 'Data Analysis','Data Analytics',  'Market Research Analyst' \n",
        "            'LLM', 'Language Model', 'NLP', 'Natural Language Processing',\n",
        "            'Computer Vision', 'Business Intelligence Analyst', 'Quantitative Analyst', 'Operations Analyst']\n",
        "\n",
        "match = lambda col: df[col].str.contains('|'.join(keywords), case=False, na=False)\n",
        "\n",
        "df['DATA_ANALYST_JOB'] = match('TITLE_NAME') \\\n",
        "             | match('SKILLS_NAME') \\\n",
        "             | match('SPECIALIZED_SKILLS_NAME') \n",
        "df['DATA_ANALYST_JOB'].value_counts()"
      ],
      "id": "d420d149",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "df['DATA_ANALYST_JOB']"
      ],
      "id": "20a7358a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Define custom colors for 'True' and 'False' categories\n",
        "color_map = {\n",
        "    False: \"#d62728\" ,   # Red\n",
        "    True: \"#3BB143 \"   # Green\n",
        "}\n",
        "\n",
        "\n",
        "fig = px.bar(df_grouped, \n",
        "             x='NAICS2_NAME', \n",
        "             y='Job_Count',\n",
        "             color='DATA_ANALYST_JOB',\n",
        "             title=\"Data Analytics & Business Analytics Job Trends\",\n",
        "              labels={'NAICS2_NAME': 'Industry', 'Job_Count': 'Number of Jobs'},\n",
        "             barmode='group',\n",
        "             color_discrete_map=color_map  # Custom colors\n",
        "            )\n",
        "\n",
        "fig.update_layout(\n",
        "    yaxis=dict(\n",
        "        title=\"Number of Jobs\", \n",
        "        range=[0, df_grouped['Job_Count'].max() * 1.2]  # Increase y-axis height\n",
        "    ),\n",
        "    height=700,  # Make the figure taller\n",
        "    xaxis=dict(\n",
        "        tickangle=-45  # Rotate x-axis labels for better readability\n",
        "    )\n",
        ")\n",
        "\n",
        "fig.show()"
      ],
      "id": "5ac555cf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Identify the top 2 industries with the most data analyst jobs\n",
        "top_industries = df_grouped.groupby(\"NAICS2_NAME\")[\"Job_Count\"].sum().nlargest(10).index\n",
        "\n",
        "# Filter the original grouped DataFrame, not the raw df\n",
        "df_top_industries = df_grouped[df_grouped[\"NAICS2_NAME\"].isin(top_industries)]\n",
        "\n",
        "# Create the bar chart to analyze job counts within these industries\n",
        "fig = px.bar(df_top_industries, \n",
        "             x=\"DATA_ANALYST_JOB\", \n",
        "             y=\"Job_Count\", \n",
        "             color=\"NAICS2_NAME\",\n",
        "             title=\"Top 2 Industries Hiring Data Analysts\",\n",
        "             labels={'DATA_ANALYST_JOB': 'Job Title', 'Job_Count': 'Number of Jobs'},\n",
        "             barmode='group')\n",
        "\n",
        "fig.show()"
      ],
      "id": "3e923279",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Define target industries\n",
        "target_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n",
        "\n",
        "# Filter the DataFrame\n",
        "df_skills = df[df[\"NAICS2_NAME\"].isin(target_industries)]"
      ],
      "id": "825958a9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "\n",
        "# Define target industries\n",
        "target_industries = [\"Finance and Insurance\", \"Health Care and Social Assistance\"]\n",
        "\n",
        "# Filter the original DataFrame (df) instead of df_grouped\n",
        "df_remote = df[df[\"NAICS2_NAME\"].isin(target_industries)]\n",
        "\n",
        "# Count occurrences of each remote type in these industries\n",
        "df_remote_grouped = df_remote.groupby(\"REMOTE_TYPE_NAME\").size().reset_index(name=\"Count\")\n",
        "\n",
        "# Create a pie chart\n",
        "fig = px.pie(df_remote_grouped, \n",
        "             names=\"REMOTE_TYPE_NAME\", \n",
        "             values=\"Count\", \n",
        "             title=\"Remote vs. On-Site Data Analyst Jobs in Finance & Healthcare\",\n",
        "             color=\"REMOTE_TYPE_NAME\", \n",
        "             color_discrete_map={\"Remote\": \"#1f77b4\", \"On-Site\": \"#d62728\", \"Hybrid\": \"#2ca02c\"})\n",
        "\n",
        "fig.show()"
      ],
      "id": "0cac660f",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/begiii/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}